// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String?               @unique
  password            String?
  googleId            String?               @map("google_id")
  role                ROLE                  @default(USER)
  memberInformation   MemberInformation[]
  employeeInformation EmployeeInformation[]

  @@map("user")
}

enum ROLE {
  USER
  DRIVER
  ADMIN
}

model MemberInformation {
  id          Int       @id @default(autoincrement())
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  phoneNumber String?   @db.VarChar(10)
  stipeId     String?   @map("stipe_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  wallet      Wallet[]
  booking     Booking[]

  @@map("member_information")
}

model Wallet {
  id                  Int               @id @default(autoincrement())
  memberInformation   MemberInformation @relation(fields: [memberInformationId], references: [id])
  memberInformationId Int               @map("member_information")
  amount              Decimal           @default(0.00) @db.Decimal(20, 2)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  transactionIn       TransactionIn[]
  transactionOut      TransactionOut[]

  @@map("wallet")
}

model TransactionIn {
  id            Int      @id @default(autoincrement())
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  walletId      Int      @map("wallet_id")
  price         Decimal  @db.Decimal(20, 2)
  transactionId String   @map("transaction_in")
  createdAt     DateTime @default(now())

  @@map("transaction_in")
}

model TransactionOut {
  id        Int      @id @default(autoincrement())
  price     Decimal  @db.Decimal(20, 2)
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  walletId  Int      @map("wallet_id")

  @@map("transaction_out")
}

model RegisterEmployeeInformation {
  id          Int      @id @default(autoincrement())
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  idCard      String   @unique @db.VarChar(13)
  phoneNumber String   @map("phone_number") @db.VarChar(10)
  gender      GENDER
  image       String?
  createdAt   DateTime @default(now())

  @@map("RegisterEmployee_Information")
}

model EmployeeInformation {
  id            Int              @id @default(autoincrement())
  user          User             @relation(fields: [userId], references: [id])
  userId        Int              @map("user_id")
  firstName     String           @map("first_name")
  lastName      String           @map("last_name")
  idCard        String           @unique @map("id_card") @db.VarChar(13)
  phoneNumber   String           @map("phone_number") @db.VarChar(10)
  gender        GENDER
  image         String?
  status        Boolean          @default(true)
  createdAt     DateTime         @default(now())
  carinfomation Carinformation[]

  @@map("empolyee_information")
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

model Carinformation {
  id                    Int                 @id @default(autoincrement())
  employeeInformation   EmployeeInformation @relation(fields: [employeeInformationId], references: [id])
  employeeInformationId Int                 @map("employee_information_id")
  quantity              Int                 @default(6)
  plateNumber           String              @map("plate_number")
  createdAt             DateTime            @default(now())
  booking               Booking[]

  @@map("car_information")
}

model WorkArea {
  id             Int              @id @default(autoincrement())
  areaName       String           @map("area_name")
  status         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  SubAreaStation SubAreaStation[]

  @@map("work_area")
}

model SubAreaStation {
  id              Int       @id @default(autoincrement())
  stationName     String    @map("station_name")
  workArea        WorkArea  @relation(fields: [workAreaId], references: [id])
  latitude        Decimal
  longitude       Decimal
  status          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  pickedUpStation Booking[] @relation("pickedUpStation")
  dropDownStation Booking[] @relation("dropDownStation")
  workAreaId      Int

  @@map("sub_area_station")
}

model Booking {
  id                  Int               @id @default(autoincrement())
  memberInformation   MemberInformation @relation(fields: [memberInformationId], references: [id])
  memberInformationId Int               @map("member_information_id")
  carInformation      Carinformation?   @relation(fields: [carinformationId], references: [id])
  carinformationId    Int?              @map("car_information_id")
  pickedUpStation     SubAreaStation    @relation("pickedUpStation", fields: [pickedUpStationId], references: [id])
  pickedUpStationId   Int               @map("picked_up_station_id")
  dropDownStation     SubAreaStation    @relation("dropDownStation", fields: [dropDownStationId], references: [id])
  dropDownStationId   Int               @map("drop_down_station_id")
  passenger           Int
  price               Decimal
  status              BOOKINGSTATUS     @default(WAITING)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())

  @@map("booking")
}

enum BOOKINGSTATUS {
  WAITING
  COMING
  PICKED
  DONE
  CANCEL
}
