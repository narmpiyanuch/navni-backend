// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String?              @unique
  password           String?
  googleId           String?
  role               RLOE                 @default(USER)
  MemberInfomation   MemberInfomation[]
  EmployeeInfomation EmployeeInfomation[]

  @@map("user")
}

enum RLOE {
  USER
  DRIVER
  ADMIN
}

model MemberInfomation {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String?   @db.VarChar(10)
  stipeId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  Wallet      Wallet[]
  Booking     Booking[]

  @@map("member_infomation")
}

model Wallet {
  id                 Int              @id @default(autoincrement())
  memberInfomation   MemberInfomation @relation(fields: [memberInfomationId], references: [id])
  memberInfomationId Int
  amount             Decimal          @default(0.00) @db.Decimal(20, 2)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  TransactionIn      TransactionIn[]
  TransactionOut     TransactionOut[]

  @@map("wallet")
}

model TransactionIn {
  id            Int      @id @default(autoincrement())
  wallet        Wallet   @relation(fields: [walletId], references: [id])
  walletId      Int
  price         Decimal  @db.Decimal(20, 2)
  method        METHOD?
  transactionId String
  createdAt     DateTime @default(now())

  @@map("transaction_in")
}

enum METHOD {
  QRCODE
  CREDIT_CARD
}

model TransactionOut {
  id        Int      @id @default(autoincrement())
  price     Decimal  @db.Decimal(20, 2)
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  walletId  Int

  @@map("transaction_out")
}

model EmployeeInfomation {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
  firstName     String
  lastName      String
  idCard        String          @db.VarChar(13)
  phoneNumber   String          @db.VarChar(10)
  gender        GENDER
  image         String?
  createdAt     DateTime        @default(now())
  Carinfomation Carinfomation[]
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

model Carinfomation {
  id                   Int                @id @default(autoincrement())
  employeeInfomation   EmployeeInfomation @relation(fields: [employeeInfomationId], references: [id])
  employeeInfomationId Int
  quantity             Int                @default(6)
  plateNumber          String
  createdAt            DateTime           @default(now())
  Booking              Booking[]
}

model WorkArea {
  id             Int              @id @default(autoincrement())
  areaName       String
  status         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  SubAreaStation SubAreaStation[]
}

model SubAreaStation {
  id          Int       @id @default(autoincrement())
  stationName String
  workArea    WorkArea  @relation(fields: [workAreaId], references: [id])
  latitude    Decimal
  longitude   Decimal
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  Booking     Booking[]
  workAreaId  Int
}

model Booking {
  id                 Int              @id @default(autoincrement())
  memberInfomation   MemberInfomation @relation(fields: [memberInfomationId], references: [id])
  memberInfomationId Int
  carInfomation      Carinfomation    @relation(fields: [carinfomationId], references: [id])
  carinfomationId    Int
  subAreaStation     SubAreaStation   @relation(fields: [subAreaStationId], references: [id])
  subAreaStationId   Int
  passenger          Int
  price              Decimal
  status             BOOKINGSTATUS
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
}

enum BOOKINGSTATUS {
  WAITING
  COMING
  PICKED
  DONE
  CANCEL
}
